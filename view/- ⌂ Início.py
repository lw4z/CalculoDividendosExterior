"""
# Tela inicial
Aqui √© exibida uma explica√ß√£o sobre a declara√ß√£o dos dividendos al√©m da √∫ltima cota√ß√£o
v√°lida e de um gr√°fico temporal das cota√ß√µes do dolar registradas na base.
"""

import datetime
import json
import os
import pandas as pd
import requests
import streamlit as st

diretorio_atual = os.path.dirname(__file__)

# Configura√ß√µes da p√°gina
st.set_page_config(
    page_title="In√≠cio",
    page_icon='üñ©',
)

# Barra lateral esquerda
st.sidebar.markdown('## Configura√ß√µes:')

# Bot√£o atualizar base de dados da barra lateral
atualizar_button = st.sidebar.button('Atualizar base das cota√ß√µes')

if atualizar_button:
    # Load para carregamento da atividade
    with st.spinner("Carregando..."):
        result = requests.get(
            url='http://127.0.0.1:8000/atualizar_base_cotacoes/'
        )
        if result.status_code == 200:
            st.success('Base atualizada com sucesso!')
        else:
            st.error('Ocorreu um erro durante a atualiza√ß√£o da base!')

# Texto da tela inicial
texto = """## üåé Declara√ß√£o de dividendos no exterior

Os impostos pagos ou retidos no exterior, para compensa√ß√£o no Brasil, devem ser convertidos utilizando o valor do d√≥lar, fixado para compra pelo BACEN, do √∫ltimo dia √∫til da primeira quinzena do m√™s anterior ao do pagamento do imposto.

Ao receber dividendos pagos no exterior por A√ß√µes, REITs, ADRs e  ETFs √© necess√°rio apurar o carn√™-le√£o. Trata-se de um recolhimento mensal obrigat√≥rio, pelo contribuinte, pessoa f√≠sica, residente no Brasil, que receber rendimentos de outra pessoa f√≠sica ou do exterior.

Para utilizar a aplica√ß√£o Carn√™ Le√£o n√£o √© necess√°rio baixar o programa ou aplicativo para celular. Acesse o Centro Virtual de Atendimento (Portal e-CAC), dispon√≠vel no site da Receita Federal, selecione o servi√ßo ‚ÄúMeu Imposto de Renda‚Äù > "Declara√ß√µes" > "Acessar Carn√™-Le√£o".

[Fonte](https://ajuda.bancointer.com.br/pt-BR/articles/5952518-como-faco-declaracao-de-dividendos-recebidos-no-exterior)
"""
st.markdown(texto)

# Coleta de dados para exibi√ß√£o da √∫ltima cota√ß√£o v√°lida
data_cotacao = datetime.datetime.now()
ano = data_cotacao.year
mes = data_cotacao.strftime('%m')
dia = data_cotacao.strftime('%d')
data_get = {'ano': ano, 'mes': mes, 'dia': dia}

# Chamada da api
result = requests.get(
        url = 'http://127.0.0.1:8000/cotacao_busca_dia_util/',
        params = data_get
    )

date_str = datetime.datetime.strptime(result.json().get('data'), '%Y-%m-%dT%H:%M:%S')
date_cotacao = date_str.strftime('%d/%m/%Y')
cotacao_compra = result.json().get('cotacao_compra')
cotacao_venda = result.json().get('cotacao_venda')

# Exibi√ß√£o da √∫ltima cota√ß√£o
st.subheader(f'üí≤ √öltima cota√ß√£o: **{date_cotacao}**')
if cotacao_compra > 0:
    texto = f'''
        D√≥lar compra: **R&#36; {cotacao_compra}**\n
        D√≥lar venda: **R&#36; {cotacao_venda}**'''
    st.info(texto)

# Verificando cota√ß√µes por dia
st.subheader('üìà Verificando a cota√ß√£o por dia')
data_cotacao = st.date_input(
    'Selecione uma data:',
    help='Selecione apenas dias √∫teis',
    min_value=datetime.datetime(2021, 12, 12),
    max_value=datetime.datetime.today(),
)

# Dados para a chamada da api
ano = data_cotacao.year
mes = data_cotacao.strftime('%m')
dia = data_cotacao.strftime('%d')
data_get = {'ano': ano, 'mes': mes, 'dia': dia}
cotacao_button = st.button('Pesquisar')

if cotacao_button:
    result = requests.get(
        url = 'http://127.0.0.1:8000/cotacao_por_dia/',
        params = data_get
    )
    # print(result.json().get('data'))
    date_str = datetime.datetime.strptime(result.json().get('data'), '%Y-%m-%dT%H:%M:%S')
    date = date_str.strftime('%d/%m/%Y')
    # print(data)
    cotacao_compra = result.json().get('cotacao_compra')
    cotacao_venda = result.json().get('cotacao_venda')
    if cotacao_compra > 0:
        # st.write({
        #     'data': date,
        #     'cota√ß√£o compra': f'R$ {cotacao_compra}',
        #     'cota√ß√£o venda': f'R$ {cotacao_venda}'
        # })
        texto = f'''
            Dia **{date}**\n
            D√≥lar compra: **R&#36; {cotacao_compra}**\n
            D√≥lar venda: **R&#36; {cotacao_venda}**'''
        st.success(texto)
    else:
        st.warning("N√£o h√° dados para esta data! Entre com uma data referente a um dia √∫til!")


# Carregando dados da base de cota√ß√µes
path = os.path.join(diretorio_atual, '../dados/data_cotacao.json')
with open(path, 'r', encoding='utf-8') as arquivo_dados:
    cotacoes = json.load(arquivo_dados)
data_frame = pd.json_normalize(cotacoes)

# Ordenando data pela coluna data
data_frame['data'] = pd.to_datetime(data_frame['data'])
data_ordenada = data_frame.sort_values('data', ascending=False)

# Apresentando gr√°fico das cota√ß√µes
st.subheader('üìä Hist√≥rico de cota√ß√µes do d√≥lar:', )
st.line_chart(data_ordenada, x='data', y='cotacao_compra')
